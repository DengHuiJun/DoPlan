package com.zero.doplan.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_sign".
*/
public class SignDao extends AbstractDao<Sign, Long> {

    public static final String TABLENAME = "t_sign";

    /**
     * Properties of entity Sign.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PlanId = new Property(1, long.class, "planId", false, "PLAN_ID");
        public final static Property SignTime = new Property(2, long.class, "signTime", false, "SIGN_TIME");
        public final static Property KeyTodayTime = new Property(3, long.class, "keyTodayTime", false, "KEY_TODAY_TIME");
        public final static Property SignContent = new Property(4, String.class, "signContent", false, "SIGN_CONTENT");
        public final static Property CreatedTime = new Property(5, long.class, "createdTime", false, "CREATED_TIME");
    }

    private Query<Sign> plan_SignsQuery;

    public SignDao(DaoConfig config) {
        super(config);
    }
    
    public SignDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_sign\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PLAN_ID\" INTEGER NOT NULL ," + // 1: planId
                "\"SIGN_TIME\" INTEGER NOT NULL ," + // 2: signTime
                "\"KEY_TODAY_TIME\" INTEGER NOT NULL ," + // 3: keyTodayTime
                "\"SIGN_CONTENT\" TEXT," + // 4: signContent
                "\"CREATED_TIME\" INTEGER NOT NULL );"); // 5: createdTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_sign\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Sign entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPlanId());
        stmt.bindLong(3, entity.getSignTime());
        stmt.bindLong(4, entity.getKeyTodayTime());
 
        String signContent = entity.getSignContent();
        if (signContent != null) {
            stmt.bindString(5, signContent);
        }
        stmt.bindLong(6, entity.getCreatedTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Sign entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPlanId());
        stmt.bindLong(3, entity.getSignTime());
        stmt.bindLong(4, entity.getKeyTodayTime());
 
        String signContent = entity.getSignContent();
        if (signContent != null) {
            stmt.bindString(5, signContent);
        }
        stmt.bindLong(6, entity.getCreatedTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Sign readEntity(Cursor cursor, int offset) {
        Sign entity = new Sign( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // planId
            cursor.getLong(offset + 2), // signTime
            cursor.getLong(offset + 3), // keyTodayTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // signContent
            cursor.getLong(offset + 5) // createdTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Sign entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlanId(cursor.getLong(offset + 1));
        entity.setSignTime(cursor.getLong(offset + 2));
        entity.setKeyTodayTime(cursor.getLong(offset + 3));
        entity.setSignContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreatedTime(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Sign entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Sign entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Sign entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "signs" to-many relationship of Plan. */
    public List<Sign> _queryPlan_Signs(long planId) {
        synchronized (this) {
            if (plan_SignsQuery == null) {
                QueryBuilder<Sign> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PlanId.eq(null));
                queryBuilder.orderRaw("T.'SIGN_TIME' DESC");
                plan_SignsQuery = queryBuilder.build();
            }
        }
        Query<Sign> query = plan_SignsQuery.forCurrentThread();
        query.setParameter(0, planId);
        return query.list();
    }

}
